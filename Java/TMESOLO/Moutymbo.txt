Ugo Moutymbo 3800601

1.
ArbreFruitiere et Peuplier hérite de Arbre
Poirier hérite d'ArbreFruitier
Jardin est composé d'Arbre
Poirier est composé de Poire

2.******************************************************************************
public abstract class Arbre {
  private String type;
  private int taille;
  private static int nbAbres=0;
  private String id;

  public Arbre(String type){
    this.type = type;
    taille = 100;
    nbAbres++;
    id = String.format("%.2s%02d",type,nbAbres);
  }

  public String getId(){
    return id;
  }

  public void grandir(){
    taille++;
  }

  public static int getNbArbres(){
    return nbAbres;
  }

  public String toString(){
    return type +" "+ id +" "+ taille;
  }
}

3.******************************************************************************
public abstract class ArbreFruitier extends Arbre {
  protected static final int NB_FRUITS_MAX = 1000;


  public ArbreFruitier(String type){
    super(type);
  }

  protected abstract void produireFruit();

  protected abstract int getNbFruits();

  protected abstract double poidsFruits();

  public String toString(){
    return super.toString() + "contient "+100+" fruits";
  }
}

4.******************************************************************************
public class Poire implements Fruit {
  private final double poids = Math.random();

  public Poire(){
  }

  public double getPoids(){
    return poids;
  }

  public String toString(){
    String s ="Poire "+ String.format("%.2f",poids) + "kg";
    return s;
  }
}
5.******************************************************************************
import java.util.ArrayList;

public class Poirier extends ArbreFruitier {
  private int nbPoires;
  private ArrayList<Poire> tab= new ArrayList<Poire>();;

  public Poirier(){
    super("Poirier");
    nbPoires = 0;
  }

  public void produireFruit(){
    if(nbPoires<NB_FRUITS_MAX){
      nbPoires++;
      tab.add(new Poire());
    }
  }

  public int getNbFruits(){
    return nbPoires;
  }

  public double poidsFruits(){
    double poids=0;
    for(Poire p : tab){
      poids += p.getPoids();
    }
    return poids;
  }
}
6.******************************************************************************
public class Test{
  public static void main(String[]args){
    System.out.println(Arbre.getNbArbres());

    Poirier p = new Poirier();
    p.produireFruit();
    p.produireFruit();

    System.out.println(p.getNbFruits());

    System.out.println(Arbre.getNbArbres());
  }
}
7.******************************************************************************
public class Jardin {
  private Arbre[][] terrain;
  private int nbC;
  private int nbL;
  private static int nbArbres=0;


  public Jardin(int nbL, int nbC){
    this.nbL = nbL;
    this.nbC = nbC;
    terrain = new Arbre[nbL][nbC];
  }

  public boolean planter(Arbre a, int i, int j){
    if(terrain[i][j]==null){
      terrain[i][j]=a;
      nbArbres++;
      return true;
    }
    return false;
  }

  public boolean planter(Arbre a){
    return planter(a,(int) Math.random()*nbL,(int) Math.random()*nbC);
  }

  public static int compterArbres(){
    return nbArbres;
  }

  public int compterFruits(){
    int fruits=0;
    for(int i=0;i<nbL;i++)
      for(int j=0;j<nbC;j++)
        if(terrain[i][j] instanceof ArbreFruitier)
          fruits += ((ArbreFruitier) terrain[i][j]).getNbFruits();
    return fruits;
  }

  public void afficher(){
    String t="";
    for(int i=0;i<nbL;i++){
      for(int j=0;j<nbC;j++){
        if(terrain[i][j] instanceof Arbre)
          t += terrain[i][j].toString()+"\t";
        else
          t += "....\t";
      }
      t += " \n";
    }
    System.out.println(t);
  }
}

8.******************************************************************************
public interface CroissanceRapide {
  public int getVitesse();
}

public class Noisette implements Fruit {
  private final double poids = Math.random();

  public Noisette(){
  }

  public double getPoids(){
    return poids;
  }

  public String toString(){
    String s ="Noisette "+ String.format("%.2f",poids) + "kg";
    return s;
  }
}

import java.util.ArrayList;

public class Noisettier extends ArbreFruitier implements CroissanceRapide {
  private ArrayList<Noisette> tab = new ArrayList<Noisette>();

  public Noisettier(){
    super("Noisettier");
  }

  public void produireFruit(){
    if(tab.size < NB_FRUITS_MAX)
      tab.add(new Noisette());
  }

  public int getNbFruits(){
    return tab.size();
  }

  public double poidsFruits(){
    double poids=0;
    for(Noisette p : tab){
      poids += p.getPoids();
    }
    return poids;
  }

  public int getVitesse(){
    return 2;
  }
}

9.******************************************************************************
Il faut la redéfinir dans ArbreFruitier

  public boolean equals(Object obj){
    if(this == obj) return true;
    if(obj == null) return false;
    ArbreFruitier af = (ArbreFruitier) obj;
    if(this.getNbFruits() != af.getNbFruits())  return false;
    return true;
  }

10.******************************************************************************
  public abstract Fruit[] ramasser();


  //Dans Poirier
  public Fruit[] ramasser(){
    int i = 0;
    Fruit[] panier = new Fruit[getNbFruits()];
    for(Poire p : tab){
      panier[i] = p;
      i++;
    }
    tab = new ArrayList<Poire>();
    return panier;
  }

  //Dans Noisettier
  public Fruit[] ramasser(){
    int i=0;
    Fruit[] panier = new Fruit[getNbFruits()];
    for(Noisette p : tab){
      panier[i] = p;
      i++;
    }
    tab = new ArrayList<Noisette>();
    return panier;
  }

  public class Utilitaire{
    public void peser(Fruit[] panier){
      double poids = 0;
      for(Fruit f : panier)
        poids += f.getPoids();
      String s = String.format("%.2f",poids);
      System.out.println("Les fruits du panier pèsent "+s);
    }
  }
